import enum

from .. import idol
from .. import idoltype
from .. import svinfo
from .. import util
from ..config import config
from ..download import download
from ..idol import error

import pydantic

_TARGET_OS_REMAP = {"Android": idoltype.PlatformType.Android, "iOS": idoltype.PlatformType.iOS}


class DownloadTargetOS(str, enum.Enum):
    ANDROID = "Android"
    IPHONE = "iOS"


class DownloadPackageType(enum.IntEnum):
    BOOTSTRAP = 0
    LIVE = 1
    SCENARIO = 2
    SUBSCENARIO = 3
    MICRO = 4
    EVENT_SCENARIO = 5
    MULTI_UNIT_SCENARIO = 6


class DownloadUpdateRequest(pydantic.BaseModel):
    target_os: DownloadTargetOS
    install_version: str
    external_version: str
    package_list: list[int] = pydantic.Field(default_factory=list)


class DownloadBatchRequest(pydantic.BaseModel):
    client_version: str
    os: DownloadTargetOS
    package_type: DownloadPackageType
    excluded_package_ids: list[int] = pydantic.Field(default_factory=list)


class DownloadAdditionalRequest(pydantic.BaseModel):
    target_os: DownloadTargetOS
    package_type: DownloadPackageType
    package_id: int


class DownloadInfo(pydantic.BaseModel):
    size: str
    url: str


class DownloadUpdateInfo(DownloadInfo):
    version: str


class DownloadGetUrlRequest(pydantic.BaseModel):
    os: DownloadTargetOS
    path_list: list[str]


class DownloadGetUrlResponse(pydantic.BaseModel):
    url_list: list[str]


class DownloadCommonResponse(pydantic.RootModel[list[DownloadInfo]]):
    pass


class DownloadUpdateResponse(pydantic.RootModel[list[DownloadUpdateInfo]]):
    pass


@idol.register("download", "update", check_version=False, batchable=False)
async def download_update(context: idol.SchoolIdolAuthParams, request: DownloadUpdateRequest) -> DownloadUpdateResponse:
    try:
        install_version = util.parse_sif_version(request.install_version)
        external_version = util.parse_sif_version(request.external_version)
        target_version = min(external_version, install_version)
    except ValueError as e:
        raise error.IdolError(detail=str(e))

    # Get download links
    platform = _TARGET_OS_REMAP[request.target_os.value]
    links = await download.get_update_files(context.request, platform, target_version)
    result = [DownloadUpdateInfo(url=link.url, size=str(link.size), version=link.version) for link in links]

    # Inject autogenerated server info
    if config.inject_server_info():
        filehash, size = svinfo.generate_server_info(context.request, int(platform), download.get_server_version())
        target_version_str = util.sif_version_string(download.get_server_version())
        result.append(
            DownloadUpdateInfo(
                url=str(context.request.url_for("server_info", filehash=filehash)),
                size=str(size),
                version=target_version_str,
            )
        )

    return DownloadUpdateResponse.model_validate(result)


@idol.register("download", "batch", check_version=False, batchable=False)
async def download_batch(context: idol.SchoolIdolAuthParams, request: DownloadBatchRequest) -> DownloadCommonResponse:
    links = await download.get_batch_files(
        context.request, _TARGET_OS_REMAP[request.os.value], int(request.package_type), request.excluded_package_ids
    )
    return DownloadCommonResponse.model_validate([DownloadInfo(url=link.url, size=str(link.size)) for link in links])


@idol.register("download", "event", check_version=False, batchable=False)
async def download_event(context: idol.SchoolIdolAuthParams, request: DownloadBatchRequest) -> DownloadCommonResponse:
    # TODO
    return DownloadCommonResponse.model_validate([])


@idol.register("download", "additional", check_version=False, batchable=False)
async def download_additional(
    context: idol.SchoolIdolAuthParams, request: DownloadAdditionalRequest
) -> DownloadCommonResponse:
    links = await download.get_single_package(
        context.request, _TARGET_OS_REMAP[request.target_os.value], int(request.package_type), request.package_id
    )
    if links is None:
        raise error.IdolError(error.ERROR_DOWNLOAD_NO_ADDITIONAL_PACKAGE)
    return DownloadCommonResponse.model_validate([DownloadInfo(url=link.url, size=str(link.size)) for link in links])


@idol.register("download", "getUrl", check_version=False, batchable=False)
async def download_geturl(context: idol.SchoolIdolAuthParams, request: DownloadGetUrlRequest) -> DownloadGetUrlResponse:
    links = await download.get_raw_files(context.request, _TARGET_OS_REMAP[request.os.value], request.path_list)
    return DownloadGetUrlResponse(url_list=[link.url for link in links])
