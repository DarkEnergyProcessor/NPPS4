"""empty message

Revision ID: 47fdce35337e
Revises: 612bdd685d1a
Create Date: 2023-11-16 10:15:15.324981

"""
import itertools

from alembic import op
import sqlalchemy as sa

from typing import Sequence, Union


# revision identifiers, used by Alembic.
revision: str = "47fdce35337e"
down_revision: Union[str, None] = "612bdd685d1a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    scenario = op.create_table(
        "scenario",
        sa.Column("id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("scenario_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("completed", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("scenario", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_scenario_completed"), ["completed"], unique=False)
        batch_op.create_index(batch_op.f("ix_scenario_scenario_id"), ["scenario_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_scenario_user_id"), ["user_id"], unique=False)

    op.create_table(
        "sub_scenario",
        sa.Column("id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("subscenario_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("completed", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("sub_scenario", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_sub_scenario_completed"), ["completed"], unique=False)
        batch_op.create_index(batch_op.f("ix_sub_scenario_subscenario_id"), ["subscenario_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_sub_scenario_user_id"), ["user_id"], unique=False)

    conn = op.get_bind()
    res = conn.execute(sa.text("select id from user"))
    for user_id in res.scalars():
        op.bulk_insert(
            scenario,
            [
                {"user_id": user_id, "scenario_id": i, "completed": True}
                for i in itertools.chain(range(1, 4), range(184, 189))
            ],
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("sub_scenario", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_sub_scenario_user_id"))
        batch_op.drop_index(batch_op.f("ix_sub_scenario_subscenario_id"))
        batch_op.drop_index(batch_op.f("ix_sub_scenario_completed"))

    op.drop_table("sub_scenario")
    with op.batch_alter_table("scenario", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_scenario_user_id"))
        batch_op.drop_index(batch_op.f("ix_scenario_scenario_id"))
        batch_op.drop_index(batch_op.f("ix_scenario_completed"))

    op.drop_table("scenario")
    # ### end Alembic commands ###
