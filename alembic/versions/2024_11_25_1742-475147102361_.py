"""empty message

Revision ID: 475147102361
Revises: f8b44a48b0ef
Create Date: 2024-11-25 17:42:38.240831

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "475147102361"
down_revision: Union[str, None] = "f8b44a48b0ef"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "notes_list_backup",
        sa.Column("id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("crc32", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("sha256", sa.LargeBinary(), nullable=False),
        sa.Column("notes_list", sa.LargeBinary(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("sha256"),
    )
    with op.batch_alter_table("notes_list_backup", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_notes_list_backup_crc32"), ["crc32"], unique=False)

    op.create_table(
        "live_replay",
        sa.Column("id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("live_difficulty_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("use_skill", sa.Boolean(), nullable=False),
        sa.Column("timestamp", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("notes_crc32", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("notes_sha256", sa.LargeBinary(), nullable=False),
        sa.Column("precise_log", sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "live_difficulty_id", "use_skill"),
    )
    with op.batch_alter_table("live_replay", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_live_replay_live_difficulty_id"), ["live_difficulty_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_live_replay_user_id"), ["user_id"], unique=False)

    with op.batch_alter_table("live_clear", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_live_clear_clear_cnt"), ["clear_cnt"], unique=False)
        batch_op.create_index(batch_op.f("ix_live_clear_hi_score"), ["hi_score"], unique=False)

    # Recreate live_in_progress
    op.drop_table("live_in_progress")
    op.create_table(
        "live_in_progress",
        sa.Column("id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("party_user_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("lp_factor", sa.Integer(), nullable=False),
        sa.Column("unit_deck_id", sa.Integer(), nullable=False),
        sa.Column("deck_data", sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(
            ["party_user_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("live_in_progress", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_live_in_progress_user_id"), ["user_id"], unique=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("live_in_progress", schema=None) as batch_op:
        batch_op.drop_column("deck_data")

    with op.batch_alter_table("live_clear", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_live_clear_hi_score"))
        batch_op.drop_index(batch_op.f("ix_live_clear_clear_cnt"))

    with op.batch_alter_table("live_replay", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_live_replay_user_id"))
        batch_op.drop_index(batch_op.f("ix_live_replay_live_difficulty_id"))

    op.drop_table("live_replay")
    with op.batch_alter_table("notes_list_backup", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_notes_list_backup_crc32"))

    op.drop_table("notes_list_backup")
    # ### end Alembic commands ###
