"""SIS table

Revision ID: 4a18a6d96722
Revises: f098df3fb07e
Create Date: 2024-02-02 10:44:22.884036

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "4a18a6d96722"
down_revision: Union[str, None] = "f098df3fb07e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "removable_skill_info",
        sa.Column("id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("unit_removable_skill_id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "unit_removable_skill_id"),
    )
    with op.batch_alter_table("removable_skill_info", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_removable_skill_info_unit_removable_skill_id"), ["unit_removable_skill_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_removable_skill_info_user_id"), ["user_id"], unique=False)

    op.create_table(
        "unit_removable_skill",
        sa.Column("id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("unit_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.INTEGER(), "sqlite"), nullable=False),
        sa.Column("unit_removable_skill_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["unit_id"],
            ["unit.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("unit_id", "unit_removable_skill_id"),
    )
    with op.batch_alter_table("unit_removable_skill", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_unit_removable_skill_unit_id"), ["unit_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_unit_removable_skill_user_id"), ["user_id"], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("unit_removable_skill", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_unit_removable_skill_user_id"))
        batch_op.drop_index(batch_op.f("ix_unit_removable_skill_unit_id"))

    op.drop_table("unit_removable_skill")
    with op.batch_alter_table("removable_skill_info", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_removable_skill_info_user_id"))
        batch_op.drop_index(batch_op.f("ix_removable_skill_info_unit_removable_skill_id"))

    op.drop_table("removable_skill_info")
    # ### end Alembic commands ###
